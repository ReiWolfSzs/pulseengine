uniform vec3 iResolution;           // viewport resolution (in pixels)
uniform float iTime;                 // shader playback time (in seconds)

const float scanlines = 0.1;
const float fuzz = .001;
const float fuzzDensity = 999.;
const float chromatic = .001;
const float staticNoise = .9;
const float vignette = 1.1;
const float pi = 3.14159265359;

vec4 hash42(vec2 p){
    
    vec4 p4 = fract(vec4(p.xyxy) * vec4(443.8975,397.2973, 491.1871, 470.7827));
    p4 += dot(p4.wzxy, p4+19.19);
    return fract(vec4(p4.x * p4.y, p4.x*p4.z, p4.y*p4.w, p4.x*p4.w));
}


float hash( float n ){
    return fract(sin(n)*43758.5453123);
}

// 3d noise function (iq's)
float n( in vec3 x ){
    vec3 p = floor(x);
    vec3 f = fract(x);
    f = f*f*(3.0-2.0*f);
    float n = p.x + p.y*57.0 + 113.0*p.z;
    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),
                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),
                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),
                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);
    return res;
}

//tape noise
float nn(vec2 p){


    float y = p.y;
    float s = iTime*2.;
    
    float v = (n( vec3(y*.01 +s, 			1., 1.0) ) + .0)
            *(n( vec3(y*.011+1000.0+s, 	1., 1.0) ) + .0) 
            *(n( vec3(y*.51+421.0+s, 	1., 1.0) ) + .0)   
        ;
    //v*= n( vec3( (openfl_TextureCoordv.xy + vec2(s,0.))*100.,1.0) );
    v*= hash42(   vec2(p.x +iTime*0.01, p.y) ).x +.3 ;

    
    v = pow(v+.3, 1.);
    if(v<.8) v = 0.;  //threshold
    return v;
}

float hash2(vec2 p)
{
    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));
    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );
}

float noise( in vec2 p )
{
    vec2 i = floor( p );
    vec2 f = fract( p );
    vec2 u = f*f*(3.0-2.0*f);
    return mix( mix( hash2( i + vec2(0.0,0.0) ), 
                    hash2( i + vec2(1.0,0.0) ), u.x),
                mix( hash2( i + vec2(0.0,1.0) ), 
                    hash2( i + vec2(1.0,1.0) ), u.x), u.y);
}

void main()
{
    vec2 uv = openfl_TextureCoordv;
    
    // noise
    vec4 c = vec4(0);
    c += staticNoise * ((sin(iTime)+2.)*.3)*sin(.8-uv.y+sin(iTime*3.)*.1) *
        noise(vec2(uv.y*999. + iTime*999., (uv.x+999.)/(uv.y+.1)*19.));
    
    // fuzz on edges
    uv.x += fuzz*noise(vec2(uv.y*fuzzDensity, iTime*9.));
    
    // chromatic aberration
    c += vec4
    (
        flixel_texture2D(bitmap, uv + vec2(-chromatic, 0)).r,
        flixel_texture2D(bitmap, uv + vec2( 0        , 0)).g,
        flixel_texture2D(bitmap, uv + vec2( chromatic, 0)).b,
        1.
    );
    
    // scanlines
    c *= 1. + scanlines*sin(uv.y*iResolution.y*pi/2.);

    // vignette
    float dx = vignette * abs(uv.x - .5);
    float dy = vignette * abs(uv.y - .5);
    c *= (1.0 - dx * dx - dy * dy);

    // vhs noise effect
    float linesN = 270.; //fields per seconds
    uv = floor(uv*linesN);

    float col =  nn(-uv);
    
    // vhs twitching
    vec2 pos=vec2(0.5+0.5*sin(iTime),uv.y);
    vec3 coltwitch=vec3(flixel_texture2D(bitmap,pos))*0.06;
    
    gl_FragColor = vec4(vec3( col ),1.0);
    
    gl_FragColor += c;
    
    gl_FragColor += vec4(coltwitch,1.0);
}

/////////////////////////////////////////////////////////

uniform float iTime;
uniform bool isDad;

vec3 mod289(vec3 x) {
return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
return mod289(((x*34.0)+1.0)*x);
}

float snoise(vec2 v)
{
const vec4 C = vec4(0.211324865405187,
                    0.366025403784439,
                    -0.577350269189626,
                    0.024390243902439);

vec2 i  = floor(v + dot(v, C.yy) );
vec2 x0 = v -   i + dot(i, C.xx);

vec2 i1;

i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
vec4 x12 = x0.xyxy + C.xxzz;
x12.xy -= i1;

i = mod289(i);
vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
        + i.x + vec3(0.0, i1.x, 1.0 ));

vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
m = m*m ;
m = m*m ;

vec3 x = 2.0 * fract(p * C.www) - 1.0;
vec3 h = abs(x) - 0.5;
vec3 ox = floor(x + 0.5);
vec3 a0 = x - ox;

m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

vec3 g;
g.x  = a0.x  * x0.x  + h.x  * x0.y;
g.yz = a0.yz * x12.xz + h.yz * x12.yw;
return 130.0 * dot(m, g);
}

float rand(vec2 co)
{
return fract(sin(dot(co.xy,vec2(12.9898,78.233))) * 43758.5453);
}

#define ENABLE_MODE 1
#define MODE 5

float hash(in float v) { return fract(sin(v)*43768.5453); }
float hash(in vec2 v) { return fract(sin(dot(v, vec2(12.9898, 78.233)))*43768.5453); }
vec2 hash2(in float v) { return vec2(hash(v+vec2(77.77)), hash(v+vec2(999.999))); }
vec2 hash2(in vec2 v) { return vec2(hash(v+vec2(77.77)), hash(v+vec2(999.999))); }

#define GLITCH_THR 0.005
#define GLITCH_RECT_DIVISION 10.
#define GLITCH_RECT_ITR 3
vec3 glitch(in vec2 p, in float seed) {
    vec2 q = fract(p);
    float g = -1.;
    for(int i=0;i<GLITCH_RECT_ITR;i++) {
        float fi = float(i)+1.;
        float h = hash(fi + seed);
        vec2 h2 = hash2(fi + seed);

        q = p *  GLITCH_RECT_DIVISION * fi + h2;
        q *= hash2(fi + seed)*2.-1.;
        vec2 iq = floor(q);
        vec2 fq = fract(q);
        float hq = hash(iq);
        if(hq<GLITCH_THR) {
            p += hash2(iq)*2.-1.;
            g = h;
        }
    }
    return vec3(fract(p), g);
}


vec4 tex(in vec2 uv) { return flixel_texture2D(bitmap, uv); }

vec3 pattern0(in vec2 uv, in vec3 g) { return tex(uv).rgb; }
vec3 pattern1(in vec2 uv, in vec3 g) { return g.z<0. ? tex(uv).rgb : g.z * tex(uv).rgb; }
vec3 pattern2(in vec2 uv, in vec3 g) { return g.z<0. ? tex(uv).rgb : tex(uv+vec2(0.1*(g.z*2.-1.), 0.)).rgb; }
vec3 pattern3(in vec2 uv, in vec3 g) { return g.z<0. ? tex(uv).rgb : 1.-tex(uv).rgb; }
vec3 pattern4(in vec2 uv, in vec3 g) { return g.z<0. ? tex(uv).rgb : tex(g.xy).rgb; }
#define RGB_SHIFT (g.z*vec3(0.16, 0.04, -0.8))
vec3 pattern5(in vec2 uv, in vec3 g) { return g.z<0. ? tex(uv).rgb : vec3(tex(uv+vec2(RGB_SHIFT.r, 0.)).r, tex(uv+vec2(RGB_SHIFT.g, 0.)).g, tex(uv+vec2(RGB_SHIFT.b, 0.)).b); }

void main()
{
    vec2 uv = openfl_TextureCoordv;
    
    float gps = 15.;
    vec3 g = glitch(uv, floor(iTime*gps)/gps);
    
    vec3 col = vec3(0.);
    if (ENABLE_MODE==0) {
        float m = mod(iTime, 6.);
        col = 
            m<1. ? pattern0(uv, g) : 
            m<2. ? pattern1(uv, g) : 
            m<3. ? pattern2(uv, g) : 
            m<4. ? pattern3(uv, g) : 
            m<5. ? pattern4(uv, g) : 
                        pattern5(uv, g) ;
    } else {
        col =
            MODE==0 ? pattern0(uv, g) : 
            MODE==1 ? pattern1(uv, g) : 
            MODE==2 ? pattern2(uv, g) : 
            MODE==3 ? pattern3(uv, g) : 
            MODE==4 ? pattern4(uv, g) : 
            MODE==5 ? pattern5(uv, g) : 
            vec3(0.);
    }
    
    if (isDad)
        gl_FragColor = vec4(col,1.0);
    
    float time = iTime * 2.0;
    
    float noise = max(0.0, snoise(vec2(time, uv.y * 0.3)) - 0.3) * (1.0 / 0.7);
    
    noise = noise + (snoise(vec2(time*10.0, uv.y * 2.4)) - 0.5) * 0.15;
    
    float xpos = uv.x - noise * noise * 0.25;
    if (isDad)
        gl_FragColor += flixel_texture2D(bitmap, vec2(xpos, uv.y));
    
    if (isDad)
        gl_FragColor.rgb += mix(gl_FragColor.rgb, vec3(rand(vec2(uv.y * time))), noise * 0.3).rgb;
    
    if (isDad)
    {
        if (floor(mod(openfl_TextureCoordv.y * 0.3, 2.0)) == 0.0)
        {
            gl_FragColor.rgb *= 1.0 - (0.15 * noise);
        }
    }
    if (isDad)
        gl_FragColor -= flixel_texture2D(bitmap,uv) + flixel_texture2D(bitmap,uv) + flixel_texture2D(bitmap,uv);

    if (!isDad)
        gl_FragColor = flixel_texture2D(bitmap,uv);
}